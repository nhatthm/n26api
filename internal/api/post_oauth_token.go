// Code generated by github.com/swaggest/swac v0.1.19, DO NOT EDIT.

package api

import (
	"bytes"
	"context"
	"encoding/json"
	"errors"
	"io"
	"io/ioutil"
	"net/http"
	"net/url"
	"strings"
)

// PostOauthTokenRequest is operation request value.
type PostOauthTokenRequest struct {
	DeviceToken  string  // DeviceToken is a required `device-token` parameter in header.
	GrantType    string  // GrantType is a required `grant_type` parameter in formData.
	Username     *string // Username is an optional `username` parameter in formData.
	Password     *string // Password is an optional `password` parameter in formData.
	MfaToken     *string // MfaToken is an optional `mfaToken` parameter in formData.
	RefreshToken *string // RefreshToken is an optional `refresh_token` parameter in formData.
}

// encode creates *http.Request for request data.
func (request *PostOauthTokenRequest) encode(ctx context.Context, baseURL string) (*http.Request, error) {
	requestURI := baseURL + "/oauth/token"

	formData := make(url.Values, 5)
	formData.Set("grant_type", request.GrantType)

	if request.Username != nil {
		formData.Set("username", *request.Username)
	}

	if request.Password != nil {
		formData.Set("password", *request.Password)
	}

	if request.MfaToken != nil {
		formData.Set("mfaToken", *request.MfaToken)
	}

	if request.RefreshToken != nil {
		formData.Set("refresh_token", *request.RefreshToken)
	}

	var body io.Reader

	if len(formData) > 0 {
		body = strings.NewReader(formData.Encode())
	}

	req, err := http.NewRequest(http.MethodPost, requestURI, body)
	if err != nil {
		return nil, err
	}

	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")
	req.Header.Set("Accept", "application/json")

	req.Header.Set("device-token", request.DeviceToken)

	req = req.WithContext(ctx)

	return req, err
}

// PostOauthTokenResponse is operation response value.
type PostOauthTokenResponse struct {
	StatusCode           int
	ValueOK              *TokenResponse             // ValueOK is a value of 200 OK response.
	ValueBadRequest      *BadCredentialsError       // ValueBadRequest is a value of 400 Bad Request response.
	ValueUnauthorized    *UnauthorizedAuthError     // ValueUnauthorized is a value of 401 Unauthorized response.
	ValueForbidden       *RequiredMFATokenError     // ValueForbidden is a value of 403 Forbidden response.
	ValueTooManyRequests *TooManyLoginAttemptsError // ValueTooManyRequests is a value of 429 Too Many Requests response.
}

// decode loads data from *http.Response.
func (result *PostOauthTokenResponse) decode(resp *http.Response) error {
	var err error

	dump := bytes.NewBuffer(nil)
	body := io.TeeReader(resp.Body, dump)

	result.StatusCode = resp.StatusCode

	switch resp.StatusCode {
	case http.StatusOK:
		err = json.NewDecoder(body).Decode(&result.ValueOK)
	case http.StatusBadRequest:
		err = json.NewDecoder(body).Decode(&result.ValueBadRequest)
	case http.StatusUnauthorized:
		err = json.NewDecoder(body).Decode(&result.ValueUnauthorized)
	case http.StatusForbidden:
		err = json.NewDecoder(body).Decode(&result.ValueForbidden)
	case http.StatusTooManyRequests:
		err = json.NewDecoder(body).Decode(&result.ValueTooManyRequests)
	default:
		_, readErr := ioutil.ReadAll(body)
		if readErr != nil {
			err = errors.New("unexpected response status: " + resp.Status +
				", could not read response body: " + readErr.Error())
		} else {
			err = errors.New("unexpected response status: " + resp.Status)
		}
	}

	if err != nil {
		return responseError{
			resp: resp,
			body: dump.Bytes(),
			err:  err,
		}
	}

	return nil
}

// PostOauthToken performs REST operation.
func (c *Client) PostOauthToken(ctx context.Context, request PostOauthTokenRequest) (result PostOauthTokenResponse, err error) {
	if c.InstrumentCtxFunc != nil {
		ctx = c.InstrumentCtxFunc(ctx, http.MethodPost, "/oauth/token", &request)
	}

	if c.Timeout != 0 {
		var cancel func()
		ctx, cancel = context.WithTimeout(ctx, c.Timeout)

		defer cancel()
	}

	req, err := request.encode(ctx, c.BaseURL)
	if err != nil {
		return result, err
	}

	resp, err := c.transport.RoundTrip(req)

	if err != nil {
		return result, err
	}

	defer func() {
		closeErr := resp.Body.Close()
		if closeErr != nil && err == nil {
			err = closeErr
		}
	}()

	err = result.decode(resp)

	return result, err
}
